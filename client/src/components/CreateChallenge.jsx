import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { createChallenge, getTopics } from "../../API.mjs";
import "../css/createChallenge.css"; // Import the CSS file
import { Challenge } from "../DSAmodel.mjs";
import { FaQuestionCircle } from "react-icons/fa";
import { PiCat } from "react-icons/pi";
import TooltipCat from "./TooltipCat";
import { FaArrowLeft } from "react-icons/fa";

const NewChallenge = ({ setFooterOption, group }) => {
  const [title, setTitle] = useState("");
  const [selectedTopic, setSelectedTopic] = useState("");
  const [externalMaterial, setExternalMaterial] = useState(null); // To handle external material (PDF/images)
  const [numQuestions, setNumQuestions] = useState(1); // Default to 1 question
  const [topics, setTopics] = useState([]);
  const [error, setError] = useState("");
  const navigate = useNavigate();
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const [showExitModal, setShowExitModal] = useState(false);
  const [tooltipModal, setTooltipModal] = useState({
    visible: false,
    text: "",
  });

  useEffect(() => {
    const fetchTopics = async () => {
      try {
        const fetchedTopics = await getTopics(group.id);
        if (fetchedTopics) {
          setTopics(fetchedTopics);
          setSelectedTopic(fetchedTopics[0]?.topic_id || ""); // Preselect the first topic if available
        }
      } catch (err) {
        console.error("Error fetching topics:", err);
      }
    };

    fetchTopics();
  }, [group.id]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!title || !selectedTopic) {
      setError("Please fill in all required fields."); // Imposta il messaggio di errore
      return;
    }

    const challenge = new Challenge(title, group.id, selectedTopic);
    
    const result = await createChallenge(challenge);
    if (result) {
      setFooterOption("Group");
      setShowSuccessModal(true);
    } else {
      console.error("Failed to create challenge");
    }
  };

  const handleBack = () => {
    setShowExitModal(true); // Attiva il modal di conferma uscita
  };

  const handleExit = () => {
    setShowExitModal(false); // Close the modal
    navigate("/challenges"); // Navigate to challenges page
  };

  const handleCancelArrow = () => {
    setShowExitModal(false); // Close the modal without any action
  };

  const handleFileChange = (e) => {
    setExternalMaterial(e.target.files[0]); // Set the selected file (PDF or image)
  };

  return (
    <div className="generate-challenge-container">
      <div className="title-header">
        <div className="back-arrow" onClick={handleBack}>
          <FaArrowLeft size={25} />
        </div>
        <h5>Generate Challenge</h5>
      </div>

      <form onSubmit={handleSubmit} className="challenge-form">
        <div className="form-group">
          <label htmlFor="title">Title*</label>
          <input
            className={`title-input `}
            type="text"
            id="title"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            required
            placeholder="Enter the title"
          />
        </div>
        <div className="form-group">
          <label htmlFor="topic">Topic</label>
          <PiCat
            className="help-icon ms-2"
            size={30}
            style={{ cursor: "pointer" }}
            onClick={() =>
              setTooltipModal({
                visible: true,
                text: "Topics are generated by AI based on the materials you uploaded so far.",
              })
            }
          />
          <select
            id="topic"
            value={selectedTopic}
            onChange={(e) => setSelectedTopic(e.target.value)}
            required
          >
            {topics.map((topic) => (
              <option key={topic.topic_id} value={topic.topic_id}>
                {topic.name}
              </option>
            ))}
          </select>
        </div>
        <div className="form-group">
          <label htmlFor="externalMaterial">External Material</label>
          <PiCat
            className="help-icon ms-2"
            size={30}
            style={{ cursor: "pointer" }}
            onClick={() =>
              setTooltipModal({
                visible: true,
                text: "You can attach PDF files or images. The attached file will be used by AI to generate challenge.",
              })
            }
          />
          <input
            type="file"
            id="externalMaterial"
            onChange={handleFileChange}
            accept=".pdf,.jpg,.jpeg,.png"
          />
        </div>
        <div className="form-group">
          <label htmlFor="numQuestions">Number of Questions</label>
          <input
            type="number"
            id="numQuestions"
            value={numQuestions}
            onChange={(e) => setNumQuestions(e.target.value)}
            min="1"
            required
          />
        </div>
        <div className="create-container submit-btn">
          <button type="submit" className="create-button" onClick={handleSubmit}>
            Generate
          </button>
        </div>
      </form>

      {error && <div className="error-message">{error}</div>}

      {showSuccessModal && (
        <div className="modal">
          <div className="modal-content">
            <h3>Challenge Created Successfully!</h3>
            <p>Your challenge has been created and is ready for use.</p>
            <button
              className="btn modal-button"
              onClick={() => {
                navigate("/challenges"); // Naviga alla home
              }}
            >
              Go to Challenges
            </button>
          </div>
        </div>
      )}
      {showExitModal && (
        <div className="modal">
          <div className="modal-content">
            <h3>Are you sure you want to exit?</h3>
            <p>All your changes will be discarded.</p>
            <div className="row-buttons-container">
              <button className="btn btn-danger" onClick={handleExit}>
                Exit
              </button>
              <button className="btn modal-button" onClick={handleCancelArrow}>
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}

      <TooltipCat
        tooltipModal={tooltipModal}
        setTooltipModal={setTooltipModal}
      ></TooltipCat>
    </div>
  );
};

export default NewChallenge;
