import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { createChallenge, getTopics } from "../../API.mjs";
import "../css/createChallenge.css"; // Import the CSS file
import { Challenge } from "../DSAmodel.mjs";
import { FaQuestionCircle } from "react-icons/fa";
import { PiCatBold } from "react-icons/pi";
import TooltipCat from "./TooltipCat";
import { FaArrowLeft } from "react-icons/fa";
import Select from "react-select";

const NewChallenge = ({ setFooterOption, group }) => {
  const [title, setTitle] = useState("");
  const [selectedTopic, setSelectedTopic] = useState(null);
  const [externalMaterial, setExternalMaterial] = useState(null); // To handle external material (PDF/images)
  const [numQuestions, setNumQuestions] = useState(1); // Default to 1 question
  const [topics, setTopics] = useState([]);
  const [error, setError] = useState("");
  const navigate = useNavigate();
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const [showExitModal, setShowExitModal] = useState(false);
  const [catModal, setCatModal] = useState({
    visible: false,
    text: "",
  });
  const [tooltipModal, setTooltipModal] = useState({
    visible: false,
    text: "",
  });

  useEffect(() => {
    const fetchTopics = async () => {
      try {
        const fetchedTopics = await getTopics(group.id);
        if (fetchedTopics) {
          setTopics(fetchedTopics);
        }
      } catch (err) {
        console.error("Error fetching topics:", err);
      }
    };

    fetchTopics();
  }, [group.id]);

  const customStyles = {
    control: (provided) => ({
      ...provided,
      minWidth: "150px", // Adjust width as needed
      fontSize: "16px", // Adjust font size
    }),
    menu: (provided) => ({
      ...provided,
      minWidth: "150px",
    }),
  };

  // Convert topics to react-select options
  const topicOptions = topics.map((topic) => ({
    value: topic.topic_id,
    label: topic.name,
  }));

  const numOptions = [...Array(12)].map((_, i) => ({
    value: i + 1,
    label: (i + 1).toString(),
  }));

  const customStylesNumber = {
    control: (provided) => ({
      ...provided,
      width: "90px", // Match original width
      minHeight: "32px", // Adjust height
      fontSize: "14px",
    }),
    menu: (provided) => ({
      ...provided,
      width: "80px",
    }),
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!title || !selectedTopic) {
      setError("Please fill in all required fields."); // Imposta il messaggio di errore
      return;
    }

    const challenge = new Challenge(title, group.id, selectedTopic);

    const result = await createChallenge(challenge);
    if (result) {
      setFooterOption("Group");
      setShowSuccessModal(true);
    } else {
      console.error("Failed to create challenge");
    }
  };

  const handleBack = () => {
    setShowExitModal(true); // Attiva il modal di conferma uscita
  };

  const handleExit = () => {
    setShowExitModal(false); // Close the modal
    navigate("/challenges"); // Navigate to challenges page
  };

  const handleCancelArrow = () => {
    setShowExitModal(false); // Close the modal without any action
  };

  const handleFileChange = (e) => {
    setExternalMaterial(e.target.files[0]); // Set the selected file (PDF or image)
  };

  return (
    <div className="generate-challenge-container">
      <div className="title-header">
        <div className="back-arrow" onClick={handleBack}>
          <FaArrowLeft size={25} />
        </div>
        <h5>Generate Challenge</h5>
      </div>

      <form onSubmit={handleSubmit} className="challenge-form">
        <div className="form-group">
          <label htmlFor="title">Title*</label>
          <input
            className={`title-input `}
            type="text"
            id="title"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            required
            placeholder="Enter the title"
          />
        </div>
        <div className="form-group">
          <label htmlFor="topic">Topic*</label>
          <PiCatBold
            className="help-icon ms-2"
            size={30}
            style={{ cursor: "pointer" }}
            onClick={() =>
              setCatModal({
                visible: true,
                text: "Topics are generated by AI based on the materials you uploaded so far.",
              })
            }
          />
          <Select
            id="topic"
            value={
              topicOptions.find((option) => option.value === selectedTopic) ||
              null
            }
            onChange={(selectedOption) =>
              setSelectedTopic(selectedOption ? selectedOption.value : null)
            }
            options={topicOptions}
            styles={customStyles}
            placeholder="Select a topic" // Ensures placeholder is shown when nothing is selected
            isClearable // Allows users to clear selection
            noOptionsMessage={() => "No topics available"} // Message when no options exist
          />
        </div>
        <div className="form-group">
          <label htmlFor="externalMaterial">External Material</label>
          <PiCatBold
            className="help-icon ms-2"
            size={30}
            style={{ cursor: "pointer" }}
            onClick={() =>
              setCatModal({
                visible: true,
                text: "You can attach PDF files or images. The attached file will be used by AI to generate challenge.",
              })
            }
          />
          <input
            type="file"
            id="externalMaterial"
            onChange={handleFileChange}
            accept=".pdf,.jpg,.jpeg,.png"
          />
        </div>
        <div
          className="form-group"
          style={{ display: "flex", alignItems: "center" }}
        >
          <label
            htmlFor="numQuestions"
            style={{ marginRight: "90px", flexShrink: 0 }}
          >
            Number of Questions
          </label>
          <Select
            id="numQuestions"
            value={numOptions.find((opt) => opt.value === numQuestions) || null}
            onChange={(selectedOption) =>
              setNumQuestions(selectedOption?.value || "")
            }
            options={[
              ...numOptions,
            ]}
            styles={customStylesNumber}
            
          />
        </div>
        <div className="create-container submit-btn">
          <button
            type="submit"
            className="create-button"
            onClick={handleSubmit}
          >
            Generate
          </button>
        </div>
      </form>

      {error && <div className="error-message">{error}</div>}

      {showSuccessModal && (
        <div className="modal">
          <div className="modal-content">
            <h3>Challenge Created Successfully!</h3>
            <p>Your challenge has been created and is ready for use.</p>
            <button
              className="btn modal-button"
              onClick={() => {
                navigate("/challenges"); // Naviga alla home
              }}
            >
              Go to Challenges
            </button>
          </div>
        </div>
      )}
      {showExitModal && (
        <div className="modal">
          <div className="modal-content text-left">
            <h3 className="text-left">Are you sure you want to exit?</h3>
            <p className="text-left">All your changes will be discarded.</p>
            <div className="row-buttons-container">
              <button className="btn btn-danger" onClick={handleExit}>
                Exit
              </button>
              <button className="btn modal-button" onClick={handleCancelArrow}>
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Cat Modal */}
      {catModal.visible && (
        <div className="modal">
          <div className="modal-content">
            <PiCatBold size={30} className="tooltip-cat-icon" />
            <p>{catModal.text}</p>
            <button
              className="btn modal-button"
              onClick={() => setCatModal({ visible: false, text: "" })}
            >
              Close
            </button>
          </div>
        </div>
      )}

      <TooltipCat
        tooltipModal={tooltipModal}
        setTooltipModal={setTooltipModal}
      />
    </div>
  );
};

export default NewChallenge;
